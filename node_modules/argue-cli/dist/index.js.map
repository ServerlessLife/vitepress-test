{"version":3,"file":"index.js","sources":["../src/argv.ts","../src/utils.ts","../src/core.ts","../src/args.ts","../src/options.ts"],"sourcesContent":["\nconst ARGV_START_INDEX = 2\n\n/**\n * Internal state of arguments.\n */\nexport const argv = process.argv.slice(ARGV_START_INDEX)\n\n/**\n * Reset arguments state.\n */\nexport function resetArgs() {\n  argv.splice(0, argv.length)\n  argv.push(...process.argv.slice(ARGV_START_INDEX))\n}\n\n/**\n * Set arguments state.\n * @param args\n */\nexport function setArgs(...args: string[]) {\n  argv.splice(0, argv.length)\n  argv.push(...args)\n}\n","\nimport { ArgRef } from './types.js'\n\ntype FlatMerge<T> = T extends infer U ? { [K in keyof U]: U[K] } : never\n\nexport type Merge<T extends readonly [...unknown[]]> = T extends [infer L, ...infer R]\n  ? FlatMerge<NonNullable<L> & Merge<R>>\n  : unknown\n\nexport type UnionMerge<T extends readonly [...unknown[]]> = T extends [infer L, ...infer R]\n  ? L | Merge<R>\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  : any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype AnyFunction = (...args: any[]) => any\n\nexport type ReturnTypes<T extends readonly [...AnyFunction[]]> = T extends [infer L, ...infer R]\n  ? L extends AnyFunction\n    ? R extends AnyFunction[]\n      ? [ReturnType<L>, ...ReturnTypes<R>]\n      : []\n    : []\n  : []\n\n/**\n * Match reference with argument.\n * @param argRef\n * @param arg\n * @returns Full name or null.\n */\nexport function matchArgName<T extends string>(argRef: ArgRef<T>, arg: string) {\n  if (typeof argRef === 'string') {\n    return argRef === arg\n      ? argRef\n      : null\n  }\n\n  if (argRef.name === arg) {\n    return argRef.name\n  }\n\n  return argRef.aliases.includes(arg)\n    ? argRef.name\n    : null\n}\n\n/**\n * Find full argument name in references.\n * @param argRefs\n * @param arg\n * @returns Found argument's full name or null.\n */\nexport function findArgName<T extends string>(argRefs: [...ArgRef<T>[]], arg: string) {\n  let argRef: ArgRef<T>\n  let argName: T | null\n\n  for (argRef of argRefs) {\n    argName = matchArgName(argRef, arg)\n\n    if (argName) {\n      return argName\n    }\n  }\n\n  return null\n}\n","import { argv } from './argv.js'\nimport { ArgRef } from './types.js'\nimport { findArgName } from './utils.js'\n\n/**\n * Read next argument.\n * Throws error if no next argument.\n * @returns Next argument.\n */\nexport function read() {\n  const value = argv.shift()\n\n  if (!value) {\n    throw new Error('Unexpected end of arguments')\n  }\n\n  return value\n}\n\n/**\n * Expectation of the end.\n * Throws an error if there are more arguments left.\n */\nexport function end() {\n  if (argv.length) {\n    throw new Error(`Unexpected argument \"${argv[0]}\"`)\n  }\n}\n\n/**\n * Expect one of the given arguments.\n * @param argRefs\n * @returns Expected full argument name.\n */\nexport function expect<T extends string>(...argRefs: [...ArgRef<T>[]]) {\n  const arg = read()\n  const argName = findArgName(argRefs, arg)\n\n  if (!argName) {\n    throw new Error(`Unexpected argument \"${arg}\"`)\n  }\n\n  return argName\n}\n","import {\n  AliasArgRef,\n  ArgRef,\n  PrimitiveConstructor,\n  OptionsReaderState,\n  OptionsReaderRead,\n  OptionResult\n} from './types.js'\nimport { matchArgName } from './utils.js'\n\n/**\n * Describe argument with aliases.\n * @param name - Main name.\n * @param alias - Alias name.\n * @param restAliases - Rest aliases.\n * @returns Description of argument with aliases..\n */\nexport function alias<T extends string>(name: T, alias: string, ...restAliases: string[]): AliasArgRef<T> {\n  return {\n    name,\n    aliases: [alias, ...restAliases]\n  }\n}\n\n/**\n * Describe option with value.\n * @param argRef - Option name.\n * @param type - Value type.\n * @returns Option reader.\n */\nexport function option<T extends string, K extends PrimitiveConstructor>(argRef: ArgRef<T>, type: K) {\n  if (type === String) {\n    return (option: string, read: OptionsReaderRead) => {\n      const argName = matchArgName(argRef, option)\n\n      if (argName) {\n        return {\n          [argName]: read()\n        } as OptionResult<T, K>\n      }\n\n      return null\n    }\n  }\n\n  if (type === Number) {\n    return (option: string, read: OptionsReaderRead) => {\n      const argName = matchArgName(argRef, option)\n\n      if (argName) {\n        return {\n          [argName]: parseFloat(read())\n        } as OptionResult<T, K>\n      }\n\n      return null\n    }\n  }\n\n  if (type === Array) {\n    return (option: string, read: OptionsReaderRead, options: OptionsReaderState) => {\n      const argName = matchArgName(argRef, option)\n\n      if (argName) {\n        const prevValues = options[argName]\n        const values = read().split(',')\n\n        return {\n          [argName]: Array.isArray(prevValues)\n            ? prevValues.concat(values)\n            : values\n        } as OptionResult<T, K>\n      }\n\n      return null\n    }\n  }\n\n  return (option: string) => {\n    const argName = matchArgName(argRef, option)\n\n    if (argName) {\n      return {\n        [argName]: true\n      } as OptionResult<T, K>\n    }\n\n    return null\n  }\n}\n","import { argv } from './argv.js'\nimport { OptionReader, OptionResult } from './types.js'\nimport { Merge, ReturnTypes, UnionMerge } from './utils.js'\n\nfunction isOption(arg: string) {\n  return /^--?[^-].*/.test(arg)\n}\n\nfunction removePrefix(arg: string) {\n  return arg.replace(/^--?/, '')\n}\n\nfunction createOptionReader<T extends OptionReader[]>(optionReaders: [...T]) {\n  const optionReader = optionReaders.reduceRight<OptionReader | null>(\n    (readNextOption, readOption) => {\n      if (!readNextOption) {\n        return readOption\n      }\n\n      return (option, read, options) => readOption(option, read, options) ?? readNextOption(option, read, options)\n    },\n    null\n  )\n\n  return optionReader as OptionReader<UnionMerge<ReturnTypes<T>>> | null\n}\n\n/**\n * Read options from arguments.\n * @param optionReaders\n * @returns Options with values.\n */\nexport function readOptions<T extends OptionReader[]>(...optionReaders: [...T]): Partial<Merge<ReturnTypes<T>>> {\n  if (!argv.length) {\n    return {}\n  }\n\n  const readOption = createOptionReader(optionReaders)\n\n  if (!readOption) {\n    return {}\n  }\n\n  const options = {}\n  let i = 0\n  let arg = argv[i]\n  let optionResult: OptionResult | null\n  const next = () => {\n    arg = argv[++i]\n  }\n  const remove = () => {\n    argv.splice(i--, 1)\n  }\n  const read = () => {\n    next()\n    remove()\n\n    if (!arg) {\n      throw new Error('Unexpected end of arguments')\n    }\n\n    return arg\n  }\n\n  // eslint-disable-next-line no-unmodified-loop-condition\n  while (arg) {\n    if (isOption(arg)) {\n      optionResult = readOption(removePrefix(arg), read, options)\n\n      if (optionResult) {\n        remove()\n        Object.assign(options, optionResult)\n      }\n    }\n\n    next()\n  }\n\n  return options\n}\n"],"names":["ARGV_START_INDEX","argv","process","slice","resetArgs","splice","length","push","setArgs","args","matchArgName","argRef","arg","name","aliases","includes","findArgName","argRefs","argName","read","value","shift","Error","end","expect","alias","restAliases","option","type","String","Number","parseFloat","Array","options","prevValues","values","split","isArray","concat","isOption","test","removePrefix","replace","createOptionReader","optionReaders","optionReader","reduceRight","readNextOption","readOption","readOptions","i","optionResult","next","remove","Object","assign"],"mappings":"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"}