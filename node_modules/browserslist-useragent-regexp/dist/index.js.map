{"version":3,"file":"index.js","sources":["../src/browsers/utils.ts","../src/semver/types.ts","../src/semver/semver.ts","../src/browsers/browserslist.ts","../src/utils/index.ts","../src/browsers/optimize.ts","../src/regex/nodes.ts","../src/regex/regex.ts","../src/regex/utils.ts","../src/regex/optimize.ts","../src/numbers/utils.ts","../src/numbers/ray.ts","../src/numbers/segment.ts","../src/numbers/range.ts","../src/useragent/utils.ts","../src/useragent/useragent.ts","../src/useragentRegex/utils.ts","../src/versions/utils.ts","../src/versions/versions.ts","../src/useragentRegex/useragentRegex.ts"],"sourcesContent":["import type { SemverRange } from '../semver/index.js'\n\n/**\n * Array of numbers to array of first and last elements.\n * @param numbers - Array of numbers.\n * @returns Number or two numbers.\n */\nexport function numbersToRanges(numbers: number | number[]): SemverRange {\n  if (typeof numbers === 'number') {\n    return numbers\n  }\n\n  if (numbers.length === 1) {\n    return numbers[0]\n  }\n\n  return [numbers[0], numbers[numbers.length - 1]]\n}\n","export interface SemverCompareOptions {\n  ignoreMinor?: boolean\n  ignorePatch?: boolean\n  allowZeroSubversions?: boolean\n  allowHigherVersions?: boolean\n}\n\nexport type Semver = [\n  number,\n  number,\n  number\n]\n\nexport type SemverRange = number | [number, number]\n\nexport type RangedSemver = [\n  SemverRange,\n  SemverRange,\n  SemverRange\n]\n\nexport type SemverLike = string | (number | string)[]\n\nexport enum SemverPart {\n  Major = 0,\n  Minor,\n  Patch\n}\n","import type {\n  SemverLike,\n  Semver,\n  RangedSemver,\n  SemverCompareOptions\n} from './types.js'\n\n/**\n * Get semver from string or array.\n * @param version - Target to convert.\n * @returns Array with semver parts.\n */\nexport function semverify(version: SemverLike): Semver | null {\n  const versionParts = Array.isArray(version)\n    ? version\n    : version.toString().split('.')\n\n  if (versionParts[0] === 'all') {\n    return [\n      Infinity,\n      0,\n      0\n    ]\n  }\n\n  let versionPart: number | string = null\n  let semverPart: number = null\n  const semver: Semver = [\n    0,\n    0,\n    0\n  ]\n\n  for (let i = 0; i < 3; i++) {\n    versionPart = versionParts[i]\n\n    if (typeof versionPart === 'undefined') {\n      continue\n    }\n\n    semverPart = typeof versionPart === 'number'\n      ? versionPart\n      : parseInt(versionPart, 10)\n\n    if (isNaN(semverPart)) {\n      return null\n    }\n\n    semver[i] = semverPart\n  }\n\n  return semver\n}\n\n/**\n * Get semver range.\n * @param from\n * @param to\n * @returns Semver range.\n */\nexport function rangeSemver(from: Semver, to: Semver) {\n  let partIndex = 0\n  const range: Semver[] = []\n\n  for (let i = 2; i >= 0; i--) {\n    if (from[i] !== to[i]) {\n      partIndex = i\n      break\n    }\n  }\n\n  for (let i = from[partIndex], max = to[partIndex]; i <= max; i++) {\n    range.push(\n      from.map((v, j) => (j === partIndex ? i : v)) as Semver\n    )\n  }\n\n  return range\n}\n\n/**\n * Compare semvers.\n * @param a - Semver to compare.\n * @param b - Semver to compare with.\n * @param options - Compare options.\n * @returns Equals or not.\n */\nexport function compareSemvers(a: Semver, b: Semver, options: SemverCompareOptions) {\n  const [\n    major,\n    minor,\n    patch\n  ] = a\n  const [\n    majorBase,\n    minorBase,\n    patchBase\n  ] = b\n  const {\n    ignoreMinor,\n    ignorePatch,\n    allowHigherVersions\n  } = options\n\n  if (majorBase === Infinity) {\n    return true\n  }\n\n  const compareMinor = !ignoreMinor\n  const comparePatch = compareMinor && !ignorePatch\n\n  if (allowHigherVersions) {\n    if (\n      comparePatch && patch < patchBase\n      || compareMinor && minor < minorBase\n    ) {\n      return false\n    }\n\n    return major >= majorBase\n  }\n\n  if (\n    comparePatch && patch !== patchBase\n    || compareMinor && minor !== minorBase\n  ) {\n    return false\n  }\n\n  return major === majorBase\n}\n\n/**\n * Get required semver parts count.\n * @param version - Semver parts or ranges.\n * @param options - Semver compare options.\n * @returns Required semver parts count.\n */\nexport function getRequiredSemverPartsCount(version: Semver | RangedSemver, options: SemverCompareOptions) {\n  const {\n    ignoreMinor,\n    ignorePatch,\n    allowZeroSubversions\n  } = options\n  let shouldRepeatCount = ignoreMinor\n    ? 1\n    : ignorePatch\n      ? 2\n      : 3\n\n  if (allowZeroSubversions) {\n    for (let i = shouldRepeatCount - 1; i > 0; i--) {\n      if (version[i] !== 0 || shouldRepeatCount === 1) {\n        break\n      }\n\n      shouldRepeatCount--\n    }\n  }\n\n  return shouldRepeatCount\n}\n","import browserslist from 'browserslist'\nimport {\n  semverify,\n  rangeSemver\n} from '../semver/index.js'\nimport type {\n  Browser,\n  BrowserslistRequest\n} from './types.js'\n\n/**\n * Browsers strings to info objects.\n * @param browsersList - Browsers strings with family and version.\n * @returns Browser info objects.\n */\nexport function parseBrowsersList(browsersList: string[]) {\n  return browsersList.reduce<Browser[]>((browsers, browser) => {\n    const [family, versionString, versionStringTo] = browser.split(/ |-/)\n    const version = semverify(versionString)\n    const versions = !version\n      ? []\n      : versionStringTo\n        ? rangeSemver(version, semverify(versionStringTo))\n        : [version]\n\n    return versions.reduce((browsers, semver) => {\n      if (semver) {\n        browsers.push({\n          family,\n          version: semver\n        })\n      }\n\n      return browsers\n    }, browsers)\n  }, [])\n}\n\n/**\n * Request browsers list.\n * @param options - Options to get browsers list.\n * @returns Browser info objects.\n */\nexport function getBrowsersList(options: BrowserslistRequest = {}) {\n  const {\n    browsers,\n    ...browserslistOptions\n  } = options\n  const browsersList = browserslist(browsers, browserslistOptions)\n  const parsedBrowsers = parseBrowsersList(browsersList)\n\n  return parsedBrowsers\n}\n","/**\n * Compare two arrays.\n * @param a - Array to compare.\n * @param b - Array to compare.\n * @param from - Index to start compare from.\n * @returns Equals or not.\n */\nexport function compareArrays(a: unknown[], b: unknown[], from = 0) {\n  const len = a.length\n\n  for (let i = from; i < len; i++) {\n    if (a[i] !== b[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * Clone simple object.\n * @param value\n * @returns Object clone.\n */\nexport function clone<T>(value: T): T {\n  if (value === null || typeof value !== 'object') {\n    return value\n  }\n\n  /* eslint-disable */\n  const copy = Array.isArray(value)\n    ? []\n    : {}\n  let i\n\n  for (i in value) {\n    copy[i] = clone(value[i])\n  }\n  /* eslint-enable */\n\n  return copy as T\n}\n\n/**\n * Concat arrays.\n * @param items\n * @returns Concatinated arrays.\n */\nexport function concat<T>(items: (T | T[])[]) {\n  return ([] as T[]).concat(...items)\n}\n","import type {\n  Semver,\n  RangedSemver\n} from '../semver/index.js'\nimport { SemverPart } from '../semver/index.js'\nimport { compareArrays } from '../utils/index.js'\nimport type {\n  Browser,\n  BrowsersVersions\n} from './types.js'\nimport { numbersToRanges } from './utils.js'\n\n/**\n * Merge browser info object to map with versions.\n * @param browsers - Browser info object to merge.\n * @returns Merged browsers map.\n */\nexport function mergeBrowserVersions(browsers: Browser[]) {\n  const merge: BrowsersVersions = new Map<string, Semver[]>()\n\n  browsers.forEach(({\n    family,\n    version\n  }) => {\n    const versions = merge.get(family)\n\n    if (versions) {\n      const strVersion = version.join('.')\n\n      if (versions.every(_ => _.join('.') !== strVersion)) {\n        versions.push(version)\n      }\n\n      return\n    }\n\n    merge.set(family, [version])\n  })\n\n  merge.forEach((versions) => {\n    versions.sort((a, b) => {\n      for (const i in a) {\n        if (a[i] !== b[i]) {\n          return a[i] - b[i]\n        }\n      }\n\n      return 0\n    })\n  })\n\n  return merge\n}\n\n/**\n * Versions to ranged versions.\n * @param versions - Semver versions list.\n * @returns Ranged versions list.\n */\nexport function versionsListToRanges(versions: Semver[]) {\n  if (versions.length < 2) {\n    return versions\n  }\n\n  const max = versions.length + 1\n  const ranges: RangedSemver[] = []\n  let prev: number[] = null\n  let current: number[] = versions[0]\n  let major: number | number[] = [current[SemverPart.Major]]\n  let minor: number | number[] = [current[SemverPart.Minor]]\n  let patch: number | number[] = [current[SemverPart.Patch]]\n  let part: SemverPart = null\n\n  for (let i = 1; i < max; i++) {\n    prev = versions[i - 1]\n    current = versions[i] || []\n\n    for (let p = SemverPart.Major; p <= SemverPart.Patch; p++) {\n      if ((p === part || part === null)\n        && prev[p] + 1 === current[p]\n        && compareArrays(prev, current, p + 1)\n      ) {\n        part = p\n\n        if (p === SemverPart.Major) {\n          (major as number[]).push(current[SemverPart.Major])\n        } else {\n          major = current[SemverPart.Major]\n        }\n\n        if (p === SemverPart.Minor) {\n          (minor as number[]).push(current[SemverPart.Minor])\n        } else {\n          minor = current[SemverPart.Minor]\n        }\n\n        if (p === SemverPart.Patch) {\n          (patch as number[]).push(current[SemverPart.Patch])\n        } else {\n          patch = current[SemverPart.Patch]\n        }\n\n        break\n      }\n\n      if (part === p || prev[p] !== current[p]) {\n        ranges.push([\n          numbersToRanges(major),\n          numbersToRanges(minor),\n          numbersToRanges(patch)\n        ])\n        major = [current[SemverPart.Major]]\n        minor = [current[SemverPart.Minor]]\n        patch = [current[SemverPart.Patch]]\n        part = null\n        break\n      }\n    }\n  }\n\n  return ranges\n}\n","import type {\n  AstRegExp,\n  Alternative,\n  Expression,\n  Char,\n  SimpleChar,\n  SpecialChar,\n  ClassRange,\n  CharacterClass,\n  Quantifier,\n  SimpleQuantifier,\n  RangeQuantifier,\n  CapturingGroup,\n  Repetition,\n  Disjunction\n} from 'regexp-tree/ast'\nimport { concat } from '../utils/index.js'\n\nexport function AstRegExpNode(body: Expression): AstRegExp {\n  return {\n    type: 'RegExp',\n    body,\n    flags: ''\n  }\n}\n\nexport function AlternativeNode(\n  ...expressions: (Expression | Expression[])[]\n): Alternative | Expression {\n  const exps = concat(expressions).filter(Boolean)\n\n  if (exps.length === 1) {\n    return exps[0]\n  }\n\n  return {\n    type: 'Alternative',\n    expressions: exps\n  }\n}\n\nexport function SimpleCharNode(value: string | number): SimpleChar {\n  return {\n    type: 'Char',\n    kind: 'simple',\n    value: String(value),\n    codePoint: NaN\n  }\n}\n\nexport function MetaCharNode(value: string): SpecialChar {\n  return {\n    type: 'Char',\n    kind: 'meta',\n    value,\n    codePoint: NaN\n  }\n}\n\nexport function ClassRangeNode(from: Char, to: Char): ClassRange {\n  return {\n    type: 'ClassRange',\n    from,\n    to\n  }\n}\n\nexport function CharacterClassNode(\n  ...expressions: (Char | ClassRange | (Char | ClassRange)[])[]\n): CharacterClass {\n  return {\n    type: 'CharacterClass',\n    expressions: concat(expressions).filter(Boolean)\n  }\n}\n\nexport function SimpleQuantifierNode(kind: SimpleQuantifier['kind']): SimpleQuantifier {\n  return {\n    type: 'Quantifier',\n    kind,\n    greedy: true\n  }\n}\n\nexport function RangeQuantifierNode(from: number, to?: number): RangeQuantifier {\n  return {\n    type: 'Quantifier',\n    kind: 'Range',\n    from,\n    to,\n    greedy: true\n  }\n}\n\nexport function CapturingGroupNode(expression: Expression): CapturingGroup {\n  return {\n    type: 'Group',\n    capturing: true,\n    expression,\n    number: null\n  }\n}\n\nexport function RepetitionNode(expression: Expression, quantifier: Quantifier): Repetition {\n  return {\n    type: 'Repetition',\n    expression,\n    quantifier\n  }\n}\n\nexport function DisjunctionNode(...expressions: (Expression | Expression[])[]): Disjunction | Expression {\n  const exprs = concat(expressions).filter(Boolean)\n\n  if (exprs.length === 1) {\n    return exprs[0]\n  }\n\n  const disjunction: Disjunction = {\n    type: 'Disjunction',\n    left: null,\n    right: exprs.pop()\n  }\n\n  exprs.reduceRight<Disjunction>((disjunction, expr, i) => {\n    if (i === 0) {\n      disjunction.left = expr\n\n      return disjunction\n    }\n\n    disjunction.left = {\n      type: 'Disjunction',\n      left: null,\n      right: expr\n    }\n\n    return disjunction.left\n  }, disjunction)\n\n  return disjunction\n}\n\nexport function DisjunctionCapturingGroupNode(...expressions: (Expression | Expression[])[]) {\n  const expr = DisjunctionNode(...expressions)\n\n  if (expr.type === 'Disjunction') {\n    return CapturingGroupNode(expr)\n  }\n\n  return expr\n}\n\nexport function DigitPatternNode() {\n  return MetaCharNode('\\\\d')\n}\n\nexport function NumberPatternNode(\n  quantifier: Quantifier = SimpleQuantifierNode('+')\n) {\n  const numberPattern = RepetitionNode(\n    DigitPatternNode(),\n    quantifier\n  )\n\n  return numberPattern\n}\n\nexport function NumberCharsNode(value: number) {\n  return AlternativeNode(\n    Array.from(String(value), SimpleCharNode)\n  )\n}\n","import type {\n  AstRegExp,\n  AstNode,\n  Expression,\n  Char,\n  CharacterClass,\n  ClassRange\n} from 'regexp-tree/ast'\nimport RegexpTree from 'regexp-tree'\n\n/**\n * Check node whether is number pattern.\n * @param node - AST node to check.\n * @returns Is number pattern or not.\n */\nexport function isNumberPatternNode(node: AstNode) {\n  if (node.type === 'Group' && node.expression.type === 'Repetition') {\n    const {\n      expression,\n      quantifier\n    } = node.expression\n\n    return expression.type === 'Char' && expression.value === '\\\\d'\n      && quantifier.kind === '+' && quantifier.greedy\n  }\n\n  return false\n}\n\n/**\n * Check node whether is char node.\n * @param node - AST node to check.\n * @param value - Value to compare.\n * @returns Is char node or not.\n */\nexport function isCharNode(node: AstNode, value?: string | number | RegExp): node is Char {\n  if (node && node.type === 'Char') {\n    return typeof value === 'undefined'\n      || value instanceof RegExp && value.test(node.value)\n      || String(value) === node.value\n  }\n\n  return false\n}\n\n/**\n * Check node whether is digit range.\n * @param node - AST node to check.\n * @returns Is digit range or not.\n */\nexport function isDigitRangeNode(node: AstNode): node is CharacterClass & { expressions: [ClassRange] } {\n  if (node.type === 'CharacterClass' && node.expressions.length === 1) {\n    const [expression] = node.expressions\n\n    return expression.type === 'ClassRange'\n      && isCharNode(expression.from, /\\d/)\n      && isCharNode(expression.to, /\\d/)\n  }\n\n  return false\n}\n\n/**\n * Check node whether is expression.\n * @param node - AST node to check.\n * @returns Is expression node or not.\n */\nexport function isExpressionNode(node: AstNode): node is Expression {\n  return node.type !== 'RegExp' && node.type !== 'ClassRange' && node.type !== 'Quantifier'\n}\n\n/**\n * Parse regex from string or regex.\n * @param regex - Target regex or string.\n * @returns Parsed regex.\n */\nexport function parseRegex(regex: string | RegExp | AstRegExp): AstRegExp\nexport function parseRegex(regex: string | RegExp | AstNode): AstNode\nexport function parseRegex<T extends AstNode>(regex: T): T\n\nexport function parseRegex(regex: string | RegExp | AstNode) {\n  return typeof regex === 'string'\n    ? RegexpTree.parse(regex.replace(/^([^/])/, '/$1').replace(/([^/])$/, '$1/'))\n    : regex instanceof RegExp\n      ? RegexpTree.parse(regex)\n      : regex\n}\n\n/**\n * Get regex from string or AST.\n * @param src - String or AST.\n * @returns RegExp.\n */\nexport function toRegex(src: string | AstRegExp) {\n  return typeof src === 'string'\n    ? new RegExp(src)\n    : new RegExp(RegexpTree.generate(src.body), src.flags)\n}\n\n/**\n * Get string from regex or AST.\n * @param src - RegExp or AST.\n * @returns String.\n */\nexport function toString(src: string | RegExp | AstNode | null) {\n  return typeof src === 'string'\n    ? src\n    : src instanceof RegExp\n      ? src.toString()\n      : RegexpTree.generate(src)\n}\n","import type {\n  SpecificTraversalHandlers,\n  TraversalCallbacks,\n  TraversalCallback,\n  TraversalHandlers\n} from 'regexp-tree'\n\nexport interface Visitors extends SpecificTraversalHandlers {\n  every?: TraversalCallback | TraversalCallbacks\n}\n\nconst classes = [\n  'RegExp',\n  'Disjunction',\n  'Alternative',\n  'Assertion',\n  'Char',\n  'CharacterClass',\n  'ClassRange',\n  'Backreference',\n  'Group',\n  'Repetition',\n  'Quantifier'\n] as const\n\n/**\n * Create traversal visitors.\n * @param visitors\n * @returns Traversal handlers.\n */\nexport function visitors(visitors: Visitors): TraversalHandlers {\n  const { every } = visitors\n\n  if (!every) {\n    return visitors\n  }\n\n  if (typeof every === 'function') {\n    return {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      '*': every,\n      ...visitors\n    }\n  }\n\n  return classes.reduce<Record<string, TraversalCallbacks>>((newVisitors, className) => {\n    const visitor = visitors[className] as TraversalCallback | TraversalCallbacks\n    const visitorPre = visitor\n      ? 'pre' in visitor\n        ? visitor.pre\n        : visitor as TraversalCallback\n      : null\n    const visitorPost = visitor\n      ? 'post' in visitor\n        ? visitor.post\n        : null\n      : null\n\n    newVisitors[className] = {\n      pre(nodePath) {\n        if (every.pre(nodePath) !== false && visitorPre) {\n          return visitorPre(nodePath)\n        }\n\n        return true\n      },\n      post(nodePath) {\n        if (every.post(nodePath) !== false && visitorPost) {\n          return visitorPost(nodePath)\n        }\n\n        return true\n      }\n    }\n\n    return newVisitors\n  }, {})\n}\n","import type {\n  AstRegExp,\n  AstNode,\n  Expression\n} from 'regexp-tree/ast'\nimport RegexpTree from 'regexp-tree'\nimport {\n  isCharNode,\n  isDigitRangeNode,\n  parseRegex,\n  toString\n} from './regex.js'\n\n/**\n * Optimize regex.\n * @param regex - Regex to optimize.\n * @returns Optimized regex string.\n */\nexport function optimizeRegex(regex: string | RegExp | AstRegExp): AstRegExp\nexport function optimizeRegex<T extends AstNode>(regex: T): T\n\nexport function optimizeRegex(regex: string | RegExp | AstNode) {\n  // Optimization requires filled codePoints\n  const regexAst = RegexpTree.optimize(parseRegex(toString(regex))).getAST()\n\n  RegexpTree.traverse(regexAst, {\n    Group(nodePath) {\n      const {\n        parent,\n        node\n      } = nodePath\n      const { expression } = node\n\n      node.capturing = true\n\n      if (parent.type === 'RegExp'\n        || expression.type !== 'Disjunction' && parent.type !== 'Repetition'\n        || expression.type === 'Disjunction' && parent.type === 'Disjunction'\n      ) {\n        nodePath.replace(nodePath.node.expression)\n      }\n    }\n  })\n\n  return regexAst\n}\n\n/**\n * Merge digits patterns if possible.\n * @param a\n * @param b\n * @returns Merged node.\n */\nexport function mergeDigits(a: Expression, b: Expression) {\n  if (isCharNode(a) && isCharNode(b) && a.value === b.value) {\n    return b\n  }\n\n  if (\n    isCharNode(a, /\\d/) && isDigitRangeNode(b)\n    && Number(b.expressions[0].from.value) - Number(a.value) === 1\n  ) {\n    return {\n      ...b,\n      expressions: [\n        {\n          ...b.expressions[0],\n          from: a\n        }\n      ]\n    }\n  }\n\n  if (\n    isDigitRangeNode(a) && isCharNode(b, /\\d/)\n    && Number(b.value) - Number(a.expressions[0].to.value) === 1\n  ) {\n    return {\n      ...a,\n      expressions: [\n        {\n          ...a.expressions[0],\n          to: b\n        }\n      ]\n    }\n  }\n\n  return null\n}\n\n/**\n * Optimize segment number patterns.\n * @param patterns\n * @returns Optimized segment number patterns.\n */\nexport function optimizeSegmentNumberPatterns(patterns: Expression[]) {\n  return patterns.reduce<Expression[]>((patterns, node) => {\n    const prevNode = patterns[patterns.length - 1]\n\n    if (prevNode\n      && node.type === 'Alternative' && prevNode.type === 'Alternative'\n      && node.expressions.length === prevNode.expressions.length\n    ) {\n      const merged = prevNode.expressions.reduceRight<Expression[]>((exps, exp, i) => {\n        if (!exps) {\n          return exps\n        }\n\n        const merged = mergeDigits(exp, node.expressions[i])\n\n        if (merged) {\n          exps.unshift(merged)\n        } else {\n          return null\n        }\n\n        return exps\n      }, [])\n\n      if (merged) {\n        node.expressions = merged\n        patterns.pop()\n      }\n    }\n\n    patterns.push(node)\n\n    return patterns\n  }, [])\n}\n","/**\n * Transform number to digits array.\n * @param num - Target number.\n * @returns Digits array.\n */\nexport function numberToDigits(num: string | number) {\n  return Array.from(num.toString(), Number)\n}\n","import type { Expression } from 'regexp-tree/ast'\nimport {\n  SimpleCharNode,\n  CharacterClassNode,\n  ClassRangeNode,\n  RangeQuantifierNode,\n  AlternativeNode,\n  DigitPatternNode,\n  NumberPatternNode\n} from '../regex/index.js'\nimport { numberToDigits } from './utils.js'\n\n/**\n * Get digit pattern.\n * @param digit - Ray start.\n * @param includes - Include start digit or use next.\n * @returns Digit pattern.\n */\nexport function rayRangeDigitPattern(digit: number, includes: boolean) {\n  const rangeStart = digit + Number(!includes)\n\n  if (rangeStart === 0) {\n    return DigitPatternNode()\n  }\n\n  if (rangeStart === 9) {\n    return SimpleCharNode('9')\n  }\n\n  if (rangeStart > 9) {\n    return null\n  }\n\n  return CharacterClassNode(\n    ClassRangeNode(\n      SimpleCharNode(rangeStart),\n      SimpleCharNode('9')\n    )\n  )\n}\n\n/**\n * Create numeric ray pattern.\n * @param from - Start from this number.\n * @returns Numeric ray pattern parts.\n */\nexport function rayToNumberPatterns(from: number) {\n  if (from === 0) {\n    return [NumberPatternNode()]\n  }\n\n  const digits = numberToDigits(from)\n  const digitsCount = digits.length\n  const other = NumberPatternNode(\n    RangeQuantifierNode(digitsCount + 1)\n  )\n  const zeros = digitsCount - 1\n\n  if (from / Math.pow(10, zeros) === digits[0]) {\n    return [\n      AlternativeNode(\n        rayRangeDigitPattern(digits[0], true),\n        Array.from({\n          length: zeros\n        }, DigitPatternNode)\n      ),\n      other\n    ]\n  }\n\n  const raysNumberPatterns = digits.reduce<Expression[][]>((topNodes, _, i) => {\n    const ri = digitsCount - i - 1\n    const d = i === 0\n    let prev: Expression = SimpleCharNode('')\n    const nodes = digits.reduce<Expression[]>((nodes, digit, j) => {\n      if (j < ri) {\n        nodes.push(SimpleCharNode(digit))\n      } else\n      if (prev) {\n        if (j > ri) {\n          nodes.push(DigitPatternNode())\n        } else {\n          prev = rayRangeDigitPattern(digit, d)\n\n          if (prev) {\n            nodes.push(prev)\n          } else {\n            return []\n          }\n        }\n      }\n\n      return nodes\n    }, [])\n\n    if (nodes.length) {\n      topNodes.push(nodes)\n    }\n\n    return topNodes\n  }, [])\n  const numberPatterns: Expression[] = raysNumberPatterns.map(_ => AlternativeNode(_))\n\n  numberPatterns.push(other)\n\n  return numberPatterns\n}\n","import type { Expression } from 'regexp-tree/ast'\nimport { concat } from '../utils/index.js'\nimport {\n  AlternativeNode,\n  SimpleCharNode,\n  CharacterClassNode,\n  ClassRangeNode,\n  DisjunctionCapturingGroupNode,\n  DigitPatternNode,\n  optimizeSegmentNumberPatterns\n} from '../regex/index.js'\nimport { numberToDigits } from './utils.js'\n\n/**\n * Get digit pattern.\n * @param from - Segment start.\n * @param to - Segment end.\n * @param zeros - Zeros to add as prefix.\n * @returns Digit pattern.\n */\nexport function segmentRangeNumberPattern(from: number, to: number, zeros?: number) {\n  if (to < from) {\n    return null\n  }\n\n  const fromNode = SimpleCharNode(from)\n  const toNode = SimpleCharNode(to)\n  const zerosPrefix = typeof zeros === 'number' && zeros > 0\n    ? Array.from({\n      length: zeros\n    }, () => SimpleCharNode(0))\n    : []\n  const addPrefix = zerosPrefix.length\n    ? (node: Expression) => AlternativeNode(zerosPrefix, node)\n    : (node: Expression) => node\n\n  if (from === to) {\n    return addPrefix(fromNode)\n  }\n\n  if (from === 0 && to === 9) {\n    return addPrefix(DigitPatternNode())\n  }\n\n  if (to - from === 1) {\n    return addPrefix(CharacterClassNode(\n      fromNode,\n      toNode\n    ))\n  }\n\n  return addPrefix(CharacterClassNode(\n    ClassRangeNode(fromNode, toNode)\n  ))\n}\n\n/**\n * Split segment range to decade ranges.\n * @param from - Segment start.\n * @param to - Segment end.\n * @returns Ranges.\n */\nexport function splitToDecadeRanges(from: number, to: number) {\n  const ranges: [number, number][] = []\n  let num = from\n  let decade = 1\n\n  do {\n    decade *= 10\n\n    if (num < decade) {\n      ranges.push([num, Math.min(decade - 1, to)])\n      num = decade\n    }\n  } while (decade <= to)\n\n  return ranges\n}\n\n/**\n * Get common and diffs of two numbers (arrays of digits).\n * @param a - Digits.\n * @param b - Other digits.\n * @returns Common part and diffs.\n */\nexport function splitCommonDiff(a: number[], b: number[]): [string, number, number] {\n  const len = a.length\n\n  if (len !== b.length || a[0] !== b[0]) {\n    return null\n  }\n\n  let common = a[0].toString()\n  let currA = 0\n  let currB = 0\n  let diffA = ''\n  let diffB = ''\n\n  for (let i = 1; i < len; i++) {\n    currA = a[i]\n    currB = b[i]\n\n    if (currA === currB && diffA === '' && diffB === '') {\n      common += currA\n    } else {\n      diffA += currA\n      diffB += currB\n    }\n  }\n\n  return [\n    common,\n    parseInt(diffA, 10),\n    parseInt(diffB, 10)\n  ]\n}\n\n/**\n * Get segment patterns.\n * @param from - Segment start.\n * @param to - Segment end.\n * @param digitsInNumber - How many digits should be en number. Will be filled by zeros.\n * @returns Segment patterns.\n */\nexport function segmentToNumberPatterns(from: number, to: number, digitsInNumber = 0): Expression[] {\n  const fromDigits = numberToDigits(from)\n  const digitsCount = fromDigits.length\n\n  if (from < 10 && to < 10 || from === to) {\n    const zeros = digitsInNumber - digitsCount\n\n    return [segmentRangeNumberPattern(from, to, zeros)]\n  }\n\n  const toDigits = numberToDigits(to)\n\n  if (digitsCount !== toDigits.length) {\n    const decadeRanges = splitToDecadeRanges(from, to)\n    const parts = concat(\n      decadeRanges.map(([from, to]) => segmentToNumberPatterns(from, to, digitsInNumber))\n    )\n\n    return parts\n  }\n\n  const commonStart = splitCommonDiff(fromDigits, toDigits)\n\n  if (Array.isArray(commonStart)) {\n    const [\n      common,\n      from,\n      to\n    ] = commonStart\n    const digitsInNumber = digitsCount - common.length\n    const diffParts = segmentToNumberPatterns(from, to, digitsInNumber)\n\n    return [\n      AlternativeNode(\n        Array.from(common, SimpleCharNode),\n        DisjunctionCapturingGroupNode(diffParts)\n      )\n    ]\n  }\n\n  const range = Array.from({\n    length: digitsCount - 1\n  })\n  const middleSegment = segmentRangeNumberPattern(\n    fromDigits[0] + 1,\n    toDigits[0] - 1\n  )\n  const parts = [\n    ...range.map((_, i) => {\n      const ri = digitsCount - i - 1\n      const d = Number(i > 0)\n\n      return AlternativeNode(\n        fromDigits.map((digit, j) => {\n          if (j < ri) {\n            return SimpleCharNode(digit)\n          }\n\n          if (j > ri) {\n            return segmentRangeNumberPattern(0, 9)\n          }\n\n          return segmentRangeNumberPattern(digit + d, 9)\n        })\n      )\n    }),\n    // but output more readable\n    ...middleSegment\n      ? [\n        AlternativeNode(\n          middleSegment,\n          Array.from({\n            length: digitsCount - 1\n          }, () => DigitPatternNode())\n        )\n      ]\n      : [],\n    ...range.map((_, i) => {\n      const ri = digitsCount - i - 1\n      const d = Number(i > 0)\n\n      return AlternativeNode(\n        toDigits.map((digit, j) => {\n          if (j < ri) {\n            return SimpleCharNode(digit)\n          }\n\n          if (j > ri) {\n            return segmentRangeNumberPattern(0, 9)\n          }\n\n          return segmentRangeNumberPattern(0, digit - d)\n        })\n      )\n    })\n  ]\n\n  return optimizeSegmentNumberPatterns(parts)\n}\n","import {\n  DisjunctionCapturingGroupNode,\n  NumberPatternNode\n} from '../regex/index.js'\nimport { rayToNumberPatterns } from './ray.js'\nimport { segmentToNumberPatterns } from './segment.js'\n\n/**\n * Get regex for given numeric range.\n * @param from - Range start.\n * @param to - Range end.\n * @returns Range pattern.\n */\nexport function rangeToRegex(from: number, to = Infinity) {\n  if (from === Infinity) {\n    return NumberPatternNode()\n  }\n\n  const numberPatterns = to === Infinity\n    ? rayToNumberPatterns(from)\n    : segmentToNumberPatterns(from, to)\n  const regex = DisjunctionCapturingGroupNode(numberPatterns)\n\n  return regex\n}\n","import type {\n  Semver,\n  SemverCompareOptions\n} from '../semver/index.js'\nimport { compareSemvers } from '../semver/index.js'\n\n/**\n * Find matched versions.\n * @param minVersion - Semver version.\n * @param maxVersion - Semver version.\n * @param bases - Base semver versions.\n * @param options - Semver compare options.\n * @returns Matched versions.\n */\nexport function findMatchedVersions(\n  minVersion: Semver | null,\n  maxVersion: Semver | null,\n  bases: Semver[],\n  options: SemverCompareOptions\n) {\n  const compareOptions = {\n    ...options,\n    allowHigherVersions: true\n  }\n  const minComparator = (ver: Semver) => compareSemvers(ver, minVersion, compareOptions)\n  const maxComparator = (ver: Semver) => compareSemvers(maxVersion, ver, compareOptions)\n  const comparator = minVersion && maxVersion\n    ? (ver: Semver) => minComparator(ver) && maxComparator(ver)\n    : minVersion\n      ? minComparator\n      : maxVersion\n        ? maxComparator\n        : () => true\n\n  return bases.filter(comparator)\n}\n","import { regexes } from 'ua-regexes-lite'\nimport type { SemverCompareOptions } from '../semver/index.js'\nimport type { BrowsersVersions } from '../browsers/types.js'\nimport type { BrowserRegex } from './types.js'\nimport { findMatchedVersions } from './utils.js'\n\n/**\n * Get useragent regexes for given browsers.\n * @param browsers - Browsers.\n * @param options - Semver compare options.\n * @param targetRegexes - Override default regexes.\n * @returns User agent regexes.\n */\nexport function getRegexesForBrowsers(browsers: BrowsersVersions, options: SemverCompareOptions, targetRegexes = regexes) {\n  const result: BrowserRegex[] = []\n  let prevFamily = ''\n  let prevRegexIsGlobal = false\n\n  targetRegexes.forEach((regex) => {\n    const requestVersions = browsers.get(regex.family)\n\n    if (!requestVersions) {\n      return\n    }\n\n    let {\n      version,\n      minVersion,\n      maxVersion\n    } = regex\n\n    if (version) {\n      minVersion = version\n      maxVersion = version\n    }\n\n    let matchedVersions = findMatchedVersions(minVersion, maxVersion, requestVersions, options)\n\n    if (matchedVersions.length) {\n      // regex contains global patch\n      if (prevFamily === regex.family && prevRegexIsGlobal) {\n        version = undefined\n        minVersion = undefined\n        maxVersion = undefined\n        matchedVersions = requestVersions\n        result.pop()\n      }\n\n      result.push({\n        ...regex,\n        version,\n        minVersion,\n        maxVersion,\n        requestVersions,\n        matchedVersions\n      })\n    }\n\n    prevRegexIsGlobal = !version && !minVersion && !maxVersion\n    prevFamily = regex.family\n  })\n\n  return result\n}\n","import type { BrowserVersionedRegex } from '../useragent/types.js'\nimport {\n  optimizeRegex,\n  toRegex,\n  CapturingGroupNode,\n  AstRegExpNode,\n  DisjunctionCapturingGroupNode\n} from '../regex/index.js'\n\n/**\n * Compile regexes.\n * @param regexes - Objects with info about compiled regexes.\n * @returns Objects with info about compiled regexes.\n */\nexport function compileRegexes(regexes: BrowserVersionedRegex[]) {\n  return regexes.map<BrowserVersionedRegex>(({\n    regexAst,\n    ...regex\n  }) => {\n    const optimizedRegexAst = optimizeRegex(regexAst)\n\n    return {\n      ...regex,\n      regexAst: optimizedRegexAst,\n      regex: toRegex(optimizedRegexAst)\n    }\n  })\n}\n\n/**\n * Compile regex.\n * @param regexes - Objects with info about compiled regexes.\n * @returns Compiled common regex.\n */\nexport function compileRegex(regexes: BrowserVersionedRegex[]) {\n  const partsRegexes = regexes.map(\n    ({ regexAst }) => CapturingGroupNode(regexAst.body)\n  )\n  const regexAst = optimizeRegex(\n    AstRegExpNode(\n      DisjunctionCapturingGroupNode(partsRegexes)\n    )\n  )\n\n  return toRegex(regexAst)\n}\n","import type {\n  AstRegExp,\n  AstNode,\n  Expression\n} from 'regexp-tree/ast'\nimport type { NodePath } from 'regexp-tree'\nimport RegexpTree from 'regexp-tree'\nimport type {\n  SemverRange,\n  RangedSemver,\n  SemverCompareOptions\n} from '../semver/index.js'\nimport {\n  parseRegex,\n  isNumberPatternNode,\n  isExpressionNode,\n  visitors,\n  NumberPatternNode,\n  NumberCharsNode\n} from '../regex/index.js'\nimport { rangeToRegex } from '../numbers/index.js'\n\n/**\n * Get number patterns count from the regex.\n * @param regex - Target regex.\n * @returns Number patterns count.\n */\nexport function getNumberPatternsCount(regex: string | RegExp | AstNode) {\n  const regexAst = parseRegex(regex)\n  let count = 0\n\n  RegexpTree.traverse(regexAst, {\n    Group(nodePath: NodePath) {\n      if (isNumberPatternNode(nodePath.node)) {\n        count++\n      }\n    }\n  })\n\n  return count\n}\n\n/**\n * Replace number patterns.\n * @param regex - Target regex.\n * @param numbers - Number patterns to paste.\n * @param numberPatternsCount - Number patterns count to replace.\n * @returns Regex with replaced number patterns.\n */\nexport function replaceNumberPatterns(\n  regex: string | RegExp | AstRegExp,\n  numbers: Expression[],\n  numberPatternsCount?: number\n): AstRegExp\nexport function replaceNumberPatterns<T extends AstNode>(\n  regex: T,\n  numbers: Expression[],\n  numberPatternsCount?: number\n): T\n\nexport function replaceNumberPatterns(\n  regex: string | RegExp | AstNode,\n  numbers: Expression[],\n  numberPatternsCount?: number\n) {\n  let regexAst = parseRegex(regex)\n  const numbersToReplace = typeof numberPatternsCount === 'number'\n    && numberPatternsCount < numbers.length\n    ? numbers.slice(0, numberPatternsCount)\n    : numbers.slice()\n\n  RegexpTree.traverse(regexAst, visitors({\n    every() {\n      return Boolean(numbersToReplace.length)\n    },\n    Group(nodePath: NodePath) {\n      if (isNumberPatternNode(nodePath.node) && numbersToReplace.length) {\n        if (regexAst === nodePath.node) {\n          regexAst = numbersToReplace.shift()\n        } else {\n          nodePath.replace(numbersToReplace.shift())\n        }\n\n        return false\n      }\n\n      return true\n    }\n  }))\n\n  return regexAst\n}\n\n/**\n * Get from regex part with number patterns.\n * @param regex - Target regex.\n * @param numberPatternsCount - Number patterns to extract.\n * @returns Regex part with number patterns.\n */\nexport function getNumberPatternsPart(regex: string | RegExp | AstNode, numberPatternsCount?: number): Expression[] {\n  const regexAst = parseRegex(regex)\n  const maxNumbersCount = Math.min(\n    getNumberPatternsCount(regexAst),\n    numberPatternsCount || Infinity\n  )\n  const expressions: Expression[] = []\n  let numbersCounter = 0\n  let containsNumberPattern = false\n\n  RegexpTree.traverse(regexAst, visitors({\n    every: {\n      pre({ node, parent }) {\n        if (node === regexAst) {\n          return true\n        }\n\n        if (!isExpressionNode(node)) {\n          return false\n        }\n\n        if (parent === regexAst) {\n          containsNumberPattern = false\n        }\n\n        return numbersCounter < maxNumbersCount\n      },\n      post({ node, parent }) {\n        if (node !== regexAst && parent === regexAst\n          && isExpressionNode(node)\n          && (containsNumberPattern || numbersCounter > 0 && numbersCounter < maxNumbersCount)\n        ) {\n          expressions.push(node)\n        }\n      }\n    },\n    Group(nodePath: NodePath) {\n      if (isNumberPatternNode(nodePath.node) && numbersCounter < maxNumbersCount) {\n        containsNumberPattern = true\n        numbersCounter++\n\n        return false\n      }\n\n      return true\n    }\n  }))\n\n  if (expressions.length === 1 && !isNumberPatternNode(expressions[0])) {\n    return getNumberPatternsPart(expressions[0], maxNumbersCount)\n  }\n\n  return expressions\n}\n\n/**\n * Ranged semver to regex patterns.\n * @param rangedVersion - Ranged semver.\n * @param options - Semver compare options.\n * @returns Array of regex pattern.\n */\nexport function rangedSemverToRegex(rangedVersion: RangedSemver, options: SemverCompareOptions) {\n  const {\n    ignoreMinor,\n    ignorePatch,\n    allowHigherVersions\n  } = options\n  const ignoreIndex = rangedVersion[0] === Infinity\n    ? 0\n    : ignoreMinor\n      ? 1\n      : ignorePatch\n        ? 2\n        : 3\n\n  if (allowHigherVersions) {\n    const numberPatterns: Expression[][] = []\n    let prevWasZero = true\n    let d = 0\n    let start = 0\n    const createMapper = (i: number) => (range: SemverRange, j: number) => {\n      if (j >= ignoreIndex) {\n        return NumberPatternNode()\n      }\n\n      start = Array.isArray(range)\n        ? range[0]\n        : range\n\n      if (j < i) {\n        return NumberCharsNode(start)\n      }\n\n      if (j > i) {\n        return NumberPatternNode()\n      }\n\n      return rangeToRegex(start + d)\n    }\n\n    for (let i = ignoreIndex - 1; i >= 0; i--) {\n      if (prevWasZero && !rangedVersion[i]) {\n        continue\n      }\n\n      prevWasZero = false\n      numberPatterns.push(rangedVersion.map(createMapper(i)))\n      d = 1\n    }\n\n    return numberPatterns\n  }\n\n  const numberPatterns = rangedVersion.map((range, i) => {\n    if (i >= ignoreIndex) {\n      return NumberPatternNode()\n    }\n\n    if (Array.isArray(range)) {\n      return rangeToRegex(\n        range[0],\n        range[1]\n      )\n    }\n\n    return NumberCharsNode(range)\n  })\n\n  return [numberPatterns]\n}\n","import type {\n  AstRegExp,\n  AstNode\n} from 'regexp-tree/ast'\nimport RegexpTree from 'regexp-tree'\nimport type {\n  BrowserRegex,\n  BrowserVersionedRegex\n} from '../useragent/types.js'\nimport { clone } from '../utils/index.js'\nimport type {\n  RangedSemver,\n  SemverCompareOptions\n} from '../semver/index.js'\nimport { getRequiredSemverPartsCount } from '../semver/index.js'\nimport { versionsListToRanges } from '../browsers/index.js'\nimport {\n  parseRegex,\n  AlternativeNode,\n  DisjunctionCapturingGroupNode,\n  visitors\n} from '../regex/index.js'\nimport {\n  getNumberPatternsPart,\n  replaceNumberPatterns,\n  rangedSemverToRegex\n} from './utils.js'\n\n/**\n * Apply ranged sevmers to the regex.\n * @param regex - Target regex.\n * @param versions - Ranged semvers.\n * @param options - Semver compare options.\n * @returns Regex with given versions.\n */\nexport function applyVersionsToRegex(\n  regex: string | RegExp | AstRegExp,\n  versions: RangedSemver[],\n  options: SemverCompareOptions\n): AstRegExp\nexport function applyVersionsToRegex<T extends AstNode>(\n  regex: T,\n  versions: RangedSemver[],\n  options: SemverCompareOptions\n): T\n\nexport function applyVersionsToRegex(\n  regex: string | RegExp | AstNode,\n  versions: RangedSemver[],\n  options: SemverCompareOptions\n) {\n  const { allowHigherVersions } = options\n  const regexAst = parseRegex(regex)\n  const finalVersions = allowHigherVersions && versions.length\n    ? [versions[0]]\n    : versions\n  const maxRequiredPartsCount = finalVersions.reduce(\n    (maxRequiredPartsCount, version) => Math.max(\n      maxRequiredPartsCount,\n      getRequiredSemverPartsCount(version, options)\n    ),\n    1\n  )\n  const numberPatternsPart = getNumberPatternsPart(regexAst, maxRequiredPartsCount)\n  const versionsPart = DisjunctionCapturingGroupNode(\n    ...finalVersions.map(\n      version => rangedSemverToRegex(version, options)\n        .map(parts => replaceNumberPatterns(\n          AlternativeNode(clone(numberPatternsPart)),\n          parts,\n          maxRequiredPartsCount\n        ))\n    )\n  )\n\n  RegexpTree.traverse(regexAst, visitors({\n    every(nodePath) {\n      if (!numberPatternsPart.length) {\n        return false\n      }\n\n      if (nodePath.node === numberPatternsPart[0]) {\n        if (numberPatternsPart.length === 1) {\n          nodePath.replace(versionsPart)\n        } else {\n          nodePath.remove()\n        }\n\n        numberPatternsPart.shift()\n      }\n\n      return true\n    }\n  }))\n\n  return regexAst\n}\n\n/**\n * Apply browser versions to info objects.\n * @param browserRegexes - Objects with requested browser version and regex.\n * @param options - Semver compare options.\n * @returns Objects with requested browser version and regex special for this version.\n */\nexport function applyVersionsToRegexes(\n  browserRegexes: BrowserRegex[],\n  options: SemverCompareOptions\n): BrowserVersionedRegex[] {\n  return browserRegexes.map(({\n    regex: sourceRegex,\n    version,\n    maxVersion,\n    matchedVersions,\n    ...other\n  }) => {\n    let regexAst = parseRegex(sourceRegex)\n\n    if (!version) {\n      regexAst = applyVersionsToRegex(\n        regexAst,\n        versionsListToRanges(matchedVersions),\n        {\n          ...options,\n          allowHigherVersions: !maxVersion && options.allowHigherVersions\n        }\n      )\n    }\n\n    return {\n      regex: null,\n      sourceRegex,\n      regexAst,\n      version,\n      maxVersion,\n      matchedVersions,\n      ...other\n    }\n  })\n}\n","import type { SemverCompareOptions } from '../semver/index.js'\nimport { getRegexesForBrowsers } from '../useragent/index.js'\nimport {\n  getBrowsersList,\n  mergeBrowserVersions\n} from '../browsers/index.js'\nimport { applyVersionsToRegexes } from '../versions/index.js'\nimport type { UserAgentRegexOptions } from './types.js'\nimport {\n  compileRegexes,\n  compileRegex\n} from './utils.js'\n\nexport const defaultOptions = {\n  ignoreMinor: false,\n  ignorePatch: true,\n  allowZeroSubversions: false,\n  allowHigherVersions: false\n} as const satisfies Required<SemverCompareOptions>\n\n/**\n * Get source regexes objects from browserslist query.\n * @param options - Browserslist and semver compare options.\n * @returns Source regexes objects.\n */\nexport function getPreUserAgentRegexes(options: UserAgentRegexOptions = {}) {\n  const finalOptions = {\n    ...defaultOptions,\n    ...options\n  }\n  const browsersList = getBrowsersList(finalOptions)\n  const mergedBrowsers = mergeBrowserVersions(browsersList)\n  const sourceRegexes = getRegexesForBrowsers(mergedBrowsers, finalOptions)\n  const versionedRegexes = applyVersionsToRegexes(sourceRegexes, finalOptions)\n\n  return versionedRegexes\n}\n\n/**\n * Compile browserslist query to regexes.\n * @param options - Browserslist and semver compare options.\n * @returns Objects with info about compiled regexes.\n */\nexport function getUserAgentRegexes(options: UserAgentRegexOptions = {}) {\n  return compileRegexes(\n    getPreUserAgentRegexes(options)\n  )\n}\n\n/**\n * Compile browserslist query to regex.\n * @param options - Browserslist and semver compare options.\n * @returns Compiled regex.\n */\nexport function getUserAgentRegex(options: UserAgentRegexOptions = {}) {\n  return compileRegex(\n    getPreUserAgentRegexes(options)\n  )\n}\n"],"names":["numbersToRanges","numbers","length","SemverPart","Major","Minor","Patch","semverify","version","versionParts","Array","isArray","toString","split","Infinity","versionPart","semverPart","semver","i","parseInt","isNaN","rangeSemver","from","to","partIndex","range","max","push","map","v","j","compareSemvers","a","b","options","major","minor","patch","majorBase","minorBase","patchBase","ignoreMinor","ignorePatch","allowHigherVersions","compareMinor","comparePatch","getRequiredSemverPartsCount","allowZeroSubversions","shouldRepeatCount","parseBrowsersList","browsersList","reduce","browsers","browser","family","versionString","versionStringTo","versions","getBrowsersList","browserslistOptions","browserslist","parsedBrowsers","compareArrays","len","clone","value","copy","concat","items","mergeBrowserVersions","merge","Map","forEach","get","strVersion","join","every","_","set","sort","versionsListToRanges","ranges","prev","current","part","p","AstRegExpNode","body","type","flags","AlternativeNode","expressions","exps","filter","Boolean","SimpleCharNode","kind","String","codePoint","NaN","MetaCharNode","ClassRangeNode","CharacterClassNode","SimpleQuantifierNode","greedy","RangeQuantifierNode","CapturingGroupNode","expression","capturing","number","RepetitionNode","quantifier","DisjunctionNode","exprs","disjunction","left","right","pop","reduceRight","expr","DisjunctionCapturingGroupNode","DigitPatternNode","NumberPatternNode","numberPattern","NumberCharsNode","isNumberPatternNode","node","isCharNode","RegExp","test","isDigitRangeNode","isExpressionNode","parseRegex","regex","RegexpTree","parse","replace","toRegex","src","generate","classes","visitors","newVisitors","className","visitor","visitorPre","pre","visitorPost","post","nodePath","optimizeRegex","regexAst","optimize","getAST","traverse","Group","parent","mergeDigits","Number","optimizeSegmentNumberPatterns","patterns","prevNode","merged","exp","unshift","numberToDigits","num","rayRangeDigitPattern","digit","includes","rangeStart","rayToNumberPatterns","digits","digitsCount","other","zeros","Math","pow","raysNumberPatterns","topNodes","ri","d","nodes","numberPatterns","segmentRangeNumberPattern","fromNode","toNode","zerosPrefix","addPrefix","splitToDecadeRanges","decade","min","splitCommonDiff","common","currA","currB","diffA","diffB","segmentToNumberPatterns","digitsInNumber","fromDigits","toDigits","decadeRanges","parts","commonStart","diffParts","middleSegment","rangeToRegex","findMatchedVersions","minVersion","maxVersion","bases","compareOptions","minComparator","ver","maxComparator","comparator","getRegexesForBrowsers","targetRegexes","regexes","result","prevFamily","prevRegexIsGlobal","requestVersions","matchedVersions","undefined","compileRegexes","optimizedRegexAst","compileRegex","partsRegexes","getNumberPatternsCount","count","replaceNumberPatterns","numberPatternsCount","numbersToReplace","slice","shift","getNumberPatternsPart","maxNumbersCount","numbersCounter","containsNumberPattern","rangedSemverToRegex","rangedVersion","ignoreIndex","prevWasZero","start","createMapper","applyVersionsToRegex","finalVersions","maxRequiredPartsCount","numberPatternsPart","versionsPart","remove","applyVersionsToRegexes","browserRegexes","sourceRegex","defaultOptions","getPreUserAgentRegexes","finalOptions","mergedBrowsers","sourceRegexes","versionedRegexes","getUserAgentRegexes","getUserAgentRegex"],"mappings":"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"}